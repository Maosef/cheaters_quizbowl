{"version":3,"sources":["Styles.js","AnswerForm_multi.js","ContinueButton.js","Buzzer.js","Button_React.js","QuestionDisplayUntimed.js","AnswerForm.js","Searcher.js","QuestionDisplay.js","Dashboard_preloaded.js","Login_dummy.js","Register.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","theme","root","margin","padding","paper","textAlign","paperBig","height","AnswerForm","props","state","query","evidence","answer","handleChange","bind","handleSubmit","event","name","target","this","setState","value","preventDefault","onSubmit","classes","className","noValidate","autoComplete","TextField","onChange","label","variant","style","display","Button","color","onClick","React","Component","withStyles","ContinueButton","isToggled","handleClick","QuestionDisplay","wordIndex","sentenceIndex","words","text","isReading","sentences","tokenizations","map","span","slice","read","readWords","prevProps","interrupted","length","readerID","setInterval","trim","split","clearInterval","updateSentencePosition","button","flex","id","Searcher","fetchWikiData","titles","summaries","console","log","fetch","server_url","then","res","json","result","error","isLoaded","listItems","title","key","toString","Dashboard","handleBuzz","fetchData","finishQuestion","finishQuestion_multi","cleanText","skipQuestion","question_ids","sessionToken","question_id","question_idx","question","category","page","year","tournament","finished","numSeen","score","qanta_id","normalize","replace","toLowerCase","alert","playerAnswer","answer_data","session_id","window","sessionStorage","getItem","stop_position","method","headers","body","JSON","stringify","response","data","catch","setTimeout","to","Grid","container","spacing","bgcolor","item","xs","Paper","index","Login","username","password","token","username_helper","password_helper","handleUsername","handlePassword","encodeURIComponent","accept","setItem","login_css","Container","maxWidth","CssBaseline","Avatar","Typography","component","required","fullWidth","helperText","autoFocus","type","href","Register","valid_email","mail","test","verify_password","handleVerifyPassword","p","App","s","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b8dc7cbd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//     },\r\n//     paper: {\r\n//         height: 200,\r\n//         padding: theme.spacing(2),\r\n//         textAlign: 'center',\r\n//         color: theme.palette.text.secondary,\r\n//     },\r\n// }));\r\nconst useStyles = (theme) => ({\r\n    root: {\r\n        // flexGrow: 1,\r\n        margin: 10,\r\n        padding: 20,\r\n        // \"border-style\": \"solid\"\r\n    },\r\n    paper: {\r\n        margin: 10,\r\n        padding: 20,\r\n        // maxHeight: 300,\r\n        // maxWidth: 300,\r\n        // padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        // color: theme.palette.text.secondary,\r\n    },\r\n    paperBig: {\r\n        padding: 20,\r\n        height: 300,\r\n        // maxWidth: 800,\r\n        // padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        // color: theme.palette.text.secondary,\r\n    },\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport useStyles from './Styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass AnswerForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {query: '', evidence: '', answer: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        // const target = event.target;\r\n        // if (target == \"query\") {\r\n\r\n        // } else if (target == \"evidence\") {\r\n\r\n        // } else {\r\n\r\n        // }\r\n        const name = event.target.name;\r\n        // console.log(name);\r\n        this.setState({ [name]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        const state = this.state;\r\n        // alert('You submitted: ' + state.query + state.evidence + state.answer);\r\n        event.preventDefault();\r\n        this.props.onSubmit(state.query, state.evidence, state.answer);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <form className={classes.root} noValidate autoComplete=\"off\" >\r\n                <div>\r\n\r\n                <TextField \r\n                    name=\"query\" \r\n                    value={this.state.query} \r\n                    onChange={this.handleChange} \r\n                    label=\"write query here\"\r\n                    variant=\"outlined\" \r\n                    style={{display:\"block\",margin: 10,}}\r\n                />\r\n                <TextField \r\n                    name=\"evidence\" \r\n                    value={this.state.evidence} \r\n                    onChange={this.handleChange} \r\n                    label=\"write helpful results here\"\r\n                    variant=\"outlined\" \r\n                    style={{display:\"block\",margin: 10,}}\r\n                />\r\n                <TextField \r\n                    name=\"answer\" \r\n                    value={this.state.answer} \r\n                    onChange={this.handleChange} \r\n                    label=\"write answer here\"\r\n                    variant=\"outlined\" \r\n                    style={{display:\"block\",margin: 10,}}\r\n                />\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={this.handleSubmit}>\r\n                    Submit\r\n                </Button>\r\n                </div>\r\n            </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withStyles(useStyles)(AnswerForm);","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ContinueButton extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {isToggled: false, label: \"Continue\"};\r\n  \r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick() {\r\n        this.props.onClick();\r\n        // this.timerID = setInterval(\r\n        //     () => this.countdown(),\r\n        //     1000\r\n        // );\r\n    //   this.setState(state => ({\r\n    //     isToggleOn: !state.isToggleOn\r\n    //   }));\r\n    }\r\n\r\n    // countdown() {\r\n    //     if (this.state.time == \"Buzz\"){\r\n    //         this.setState({time: 3})\r\n    //     } else if (this.state.time <= 0){\r\n    //         clearInterval(this.timerID);\r\n\r\n    //     } else {\r\n    //         this.setState({time: this.state.time - 1})\r\n    //     }\r\n    // }\r\n    render() {\r\n    //   return (\r\n    //     <button onClick={this.handleClick}>\r\n    //       {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n    //     </button>\r\n    //   );\r\n      return <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClick}>\r\n         {this.state.label}\r\n             </Button>;\r\n    }\r\n  }\r\n\r\n\r\nexport default ContinueButton;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Buzzer extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {isToggled: false, time: \"Buzz\"};\r\n  \r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick() {\r\n        this.props.onClick();\r\n        this.timerID = setInterval(\r\n            () => this.countdown(),\r\n            1000\r\n        );\r\n    //   this.setState(state => ({\r\n    //     isToggleOn: !state.isToggleOn\r\n    //   }));\r\n    }\r\n\r\n    countdown() {\r\n        if (this.state.time == \"Buzz\"){\r\n            this.setState({time: 3})\r\n        } else if (this.state.time <= 0){\r\n            clearInterval(this.timerID);\r\n\r\n        } else {\r\n            this.setState({time: this.state.time - 1})\r\n        }\r\n    }\r\n    render() {\r\n    //   return (\r\n    //     <button onClick={this.handleClick}>\r\n    //       {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n    //     </button>\r\n    //   );\r\n      return <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClick}>\r\n         {this.state.time}\r\n             </Button>;\r\n    }\r\n  }\r\n\r\n\r\nexport default Buzzer;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Button_React extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {isToggled: false};\r\n  \r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    \r\n    handleClick() {\r\n        this.props.onClick();\r\n\r\n    //   this.setState(state => ({\r\n    //     isToggleOn: !state.isToggleOn\r\n    //   }));\r\n    }\r\n\r\n    render() {\r\n    //   return (\r\n    //     <button onClick={this.handleClick}>\r\n    //       {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n    //     </button>\r\n    //   );\r\n      return <Button variant=\"contained\" color=\"secondary\" onClick={this.handleClick}>\r\n         {this.props.text}\r\n             </Button>;\r\n    }\r\n  }\r\n\r\n\r\nexport default Button_React;\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport useStyles from './Styles';\r\nimport ContinueButton from './ContinueButton';\r\n\r\n// question card: reads a question word by word. can be interrupted by buzzer\r\n// option: pause after each sentence, until continue button is clicked\r\n\r\nclass QuestionDisplay extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        // this.classes = useStyles();\r\n        this.state = {wordIndex: 0, sentenceIndex: 0, words: [], text: \"\", isReading: false };\r\n        // var Tokenizer = require('sentence-tokenizer');\r\n        // var tokenizer = new Tokenizer('Chuck');\r\n        // tokenizer.setEntry(props.text);\r\n        // this.sentences = tokenizer.getSentences();\r\n        this.sentences = props.tokenizations.map(span => props.text.slice(...span));\r\n        // this.sentences = props.text.match(/[^.?!]+[.!?]+[\\])'\"`’”]*/g); //extract sentences via matching\r\n        // console.log(this.sentences);\r\n        \r\n\r\n        // this.handleContinue = this.handleContinue.bind(this);\r\n        this.read = this.read.bind(this);\r\n        this.readWords = this.readWords.bind(this);\r\n    }\r\n\r\n    // handleContinue() { // when continue button is clicked\r\n\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.read();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        // console.log(this.state.sentenceIndex + \" \" + this.sentences.length);\r\n        if (prevProps.interrupted !== this.props.interrupted && this.state.sentenceIndex+1 <= this.sentences.length){\r\n            // console.log(this.state.sentenceIndex + \" \" + this.sentences.length);\r\n            // alert(this.state.sentenceIndex);\r\n            // console.log(prevProps.interrupted,this.props.interrupted);\r\n            this.read();\r\n        }\r\n        \r\n        // if (!this.props.interrupted && this.state.sentenceIndex < this.sentences.length) { //continue button clicked\r\n        //     console.log(\"continue\");\r\n        //     this.read();\r\n        // }\r\n    }\r\n    \r\n    read() {\r\n\r\n        // read a sentence, then pause\r\n            \r\n        this.setState({\r\n            wordIndex: 0, isReading: true\r\n        });\r\n        // this.words = props.text.split(\" \");\r\n        // alert(this.sentences[this.state.sentenceIndex]);\r\n\r\n        this.readerID = setInterval(\r\n            () => this.readWords(this.state.sentenceIndex),\r\n            100\r\n        );\r\n        \r\n        //only update sentenceIndex after reading is finished\r\n        \r\n        //enable continue button\r\n        \r\n        \r\n    }\r\n\r\n    readWords(sentenceIndex) { //add word to text, display\r\n        let words = this.sentences[sentenceIndex].trim().split(\" \");\r\n        // alert(words);\r\n        if (this.state.wordIndex >= words.length) { //finished reading\r\n            clearInterval(this.readerID);\r\n            \r\n            this.setState({\r\n                sentenceIndex: this.state.sentenceIndex + 1\r\n            });\r\n            if (this.state.sentenceIndex < this.sentences.length){ //finished all clues, dont display continue\r\n                this.setState({\r\n                    isReading: false\r\n                });\r\n            }\r\n            // send index of last sentence read to Dashboard\r\n            this.props.updateSentencePosition(this.state.sentenceIndex);\r\n        } else {\r\n            this.setState({\r\n                text: this.state.text + \" \" + words[this.state.wordIndex],\r\n                wordIndex: this.state.wordIndex + 1\r\n              });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.isReading) {\r\n            var button = <ContinueButton onClick={this.read} style={{flex: 1}}/>\r\n        }\r\n        return (\r\n            <div>\r\n                <p>{this.state.text}</p>\r\n                {button}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionDisplay;\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport useStyles from './Styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass AnswerForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { answer: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ answer: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        // alert('You submitted: ' + this.state.answer);\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.answer);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n\r\n            <form onSubmit={this.handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField \r\n                    value={this.state.answer} \r\n                    onChange={this.handleChange} \r\n                    id=\"answer_box\" \r\n                    label={this.props.label} \r\n                    variant=\"outlined\" \r\n                />\r\n            </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withStyles(useStyles)(AnswerForm);","import React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport AnswerForm from './AnswerForm';\r\nimport Buzzer from './Buzzer';\r\nimport QuestionDisplay from './QuestionDisplay';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport useStyles from './Styles';\r\n\r\n//search bar, and display results\r\n\r\nclass Searcher extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.handleBuzz = this.handleBuzz.bind(this);\r\n\r\n        this.fetchWikiData = this.fetchWikiData.bind(this);\r\n\r\n        this.state = {\r\n            query: \"\",\r\n            titles: [],\r\n            summaries: []\r\n        }\r\n    }\r\n\r\n    fetchWikiData(query) {\r\n        console.log(query);\r\n        fetch(this.props.server_url + \"/search_wiki?query=\" + query)\r\n        // fetch(this.props.server_url + \"/search_wiki\")\r\n            .then(res => res.json())\r\n            // .then(res => console.log(res))\r\n            .then(\r\n                (result) => {\r\n                    console.log('Result: ', result);\r\n                    this.setState({\r\n                        titles: result.summaries\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.log('error');\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const listItems = this.state.titles.map((title) =>\r\n            <li key={title.toString()}>{title.slice(0,100)}</li>\r\n        );\r\n        return (\r\n            <div>\r\n                <AnswerForm onSubmit={this.fetchWikiData} label=\"Search...\" />\r\n                <ul>{listItems}</ul>\r\n                {/* <p>{this.state.titles}</p> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Searcher);","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport useStyles from './Styles';\r\n\r\n// question card: reads a question word by word. can be interrupted by buzzer\r\n// option: pause after each sentence, until continue button is clicked\r\n\r\nclass QuestionDisplay extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        // this.classes = useStyles();\r\n        this.state = {wordIndex: 0, text: \"\" };\r\n        // this.sentences = props.text.match(/[^.?!]+[.!?]+[\\])'\"`’”]*/g); //extract sentences via matching\r\n        // console.log(this.sentences);\r\n        // display the previous K sentences, then the next N words\r\n        this.words = props.text.split(\" \");\r\n\r\n        // this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readerID = setInterval(\r\n            () => this.read(),\r\n            100\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n    read() {\r\n        if (this.state.wordIndex >= this.words.length) {\r\n            clearInterval(this.timerID);\r\n        } else if (this.props.interrupted){\r\n            this.setState({\r\n                text: this.state.text});\r\n        } else {\r\n            this.setState({\r\n                text: this.state.text + \" \" + this.words[this.state.wordIndex],\r\n                wordIndex: this.state.wordIndex + 1\r\n              });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <Paper className={this.classes.paper}>\r\n            <p>{this.state.text}</p>\r\n                \r\n            // </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionDisplay;\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport AnswerForm from './AnswerForm_multi';\r\nimport Buzzer from './Buzzer';\r\nimport Button_React from './Button_React'\r\nimport ContinueButton from './ContinueButton';\r\n\r\nimport QuestionDisplay from './QuestionDisplayUntimed';\r\nimport Searcher from './Searcher';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport useStyles from './Styles';\r\n\r\nimport './App.css';\r\n\r\n// main Dashboard. Load question, handle interrupt, load next question\r\n// preloaded questions for experiment setting\r\n\r\n// let server_url = \"http://127.0.0.1:8000\";\r\n// let server_url = \"http://127.0.0.1:8000/api/qanta/v1/random\"\r\nlet server_url = \"\";\r\n\r\n\r\nlet num_questions = 20408;\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleBuzz = this.handleBuzz.bind(this);\r\n        this.fetchData = this.fetchData.bind(this);\r\n        this.finishQuestion = this.finishQuestion.bind(this);\r\n        this.finishQuestion_multi = this.finishQuestion_multi.bind(this);\r\n        this.cleanText = this.cleanText.bind(this);\r\n        this.skipQuestion = this.skipQuestion.bind(this);\r\n        //preloaded questions\r\n        this.question_ids = [53873, 181475, 115844, 6449, 26626, 16848, 15469, 102066, 151976, 90037]; \r\n\r\n        this.state = {\r\n            sessionToken: \"\",\r\n            question_id: -1,\r\n            question_idx: 0,\r\n            question: \"\",\r\n            category: \"\",\r\n            page: \"\",\r\n            tokenizations: [], //list of lists\r\n            year: -1,\r\n            tournament: \"\",\r\n\r\n\r\n            interrupted: false,\r\n            finished: false,\r\n            numSeen: 0,\r\n            score: 0,\r\n            isLoaded: false,\r\n            sentenceIndex: 0,\r\n        }\r\n    }\r\n    \r\n    // on init: authenticate, grab the user data, fetch first question\r\n    componentDidMount() {\r\n        let question_id = this.question_ids[0];\r\n        this.fetchData(question_id);\r\n    }\r\n    // componentWillUnmount() {\r\n    //     alert('unmounting');\r\n    // }\r\n\r\n    handleBuzz() {\r\n        console.log(this.state.interrupted);\r\n        this.setState({\r\n            interrupted: !this.state.interrupted\r\n        });\r\n    }\r\n\r\n    // handleContinue() {\r\n\r\n    // }\r\n\r\n    // fetch data from server\r\n    fetchData(question_id) {\r\n        // let id = Math.floor(Math.random() * num_questions);\r\n        \r\n        // fetch(server_url + \"/get_question/\")\r\n        fetch(server_url + \"/api/qanta/v1/\" + question_id)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    // console.log('Result: ', result.question);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        // question: result.question.replace(/\\|\\|\\|/g,\"\"),\r\n                        question_id: result.qanta_id,\r\n                        question: result.text,\r\n                        answer: result.answer,\r\n                        category: result.category,\r\n                        page: result.page,\r\n                        tokenizations: result.tokenizations,\r\n                        year: result.year,\r\n                        tournament: result.tournament\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log('error');\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    cleanText(text){ //remove accents, text in parentheses, whitespace and punctuation\r\n        let string_norm = text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n        let str_no_paren = string_norm.replace(/ *\\([^)]*\\) */g, \"\");\r\n        let cleanText = str_no_paren.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()\\s\"'”“]/g,\"\");\r\n        alert(cleanText)\r\n        return cleanText;\r\n    }\r\n\r\n    finishQuestion_multi(query,evidence,playerAnswer){\r\n        let question_idx = this.state.question_idx + 1; //state won't update immediately\r\n        this.setState({\r\n            interrupted: false, numSeen: this.state.numSeen + 1, question: \"\", question_idx: this.state.question_idx + 1\r\n        });\r\n        console.log(question_idx)\r\n        if (this.cleanText(playerAnswer) == this.cleanText(this.state.page)) {\r\n            alert(\"Correct\");\r\n            // console.log('correct');\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            });\r\n        } else {\r\n            alert(\"Incorrect\");\r\n            // console.log('incorrect');\r\n        }\r\n        let answer_data = {\r\n            session_id: window.sessionStorage.getItem(\"token\"),\r\n            question_id: this.state.question_id,\r\n            answer: playerAnswer,\r\n            query: query,\r\n            evidence: evidence,\r\n            stop_position: this.state.sentenceIndex,\r\n        };\r\n        console.log(answer_data);\r\n        // log data: session, email, questionID, answer, query, evidence\r\n        fetch('/api/qanta/v1/post_data', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(answer_data),\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n            console.log('Post Success:', data);\r\n            })\r\n            .catch((error) => {\r\n            console.error('Error:', error);\r\n            });\r\n        \r\n        if (question_idx < this.question_ids.length){\r\n            console.log(question_idx);\r\n            let question_id = this.question_ids[question_idx];\r\n            setTimeout(this.fetchData(question_id), 2000);\r\n            \r\n        } else {\r\n            alert('Test Completed!')\r\n        }\r\n        \r\n    }\r\n    // check answer, record data\r\n    finishQuestion(playerAnswer) {\r\n        this.setState({\r\n            interrupted: false, numSeen: this.state.numSeen + 1, question: \"\"\r\n        });\r\n        // todo: stop the countdown timer\r\n        // check with the answer (lowercased, no punctuation). TODO: edit distance\r\n        if (this.cleanText(playerAnswer) == this.cleanText(this.state.answer)) {\r\n            alert(\"Correct\");\r\n            // console.log('correct');\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            });\r\n        } else {\r\n            alert(\"Incorrect\");\r\n            // console.log('incorrect');\r\n        }\r\n\r\n        //display the correct answer\r\n        setTimeout(this.fetchData, 2000); //wait a little before starting next question\r\n\r\n        // restart\r\n    }\r\n\r\n    skipQuestion(){\r\n        let question_idx = this.state.question_idx + 1\r\n        this.setState({\r\n            interrupted: false, numSeen: this.state.numSeen + 1, question: \"\", question_idx: question_idx\r\n        });\r\n        let question_id = this.question_ids[question_idx];\r\n        setTimeout(this.fetchData(question_id), 2000);\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (window.sessionStorage.getItem(\"token\") == null) {\r\n            return <Redirect to=\"/login\" />;\r\n        }\r\n        const { classes } = this.props;\r\n        // console.log('rendering...')\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={3}\r\n                    // display=\"flex\"\r\n                    // flexDirection=\"row\"\r\n                    // flexWrap=\"wrap\"\r\n                    // p={1}\r\n                    // m={1}\r\n                    bgcolor=\"background.paper\"\r\n                >\r\n                    <Grid item xs={12}>\r\n\r\n                        <Paper className={classes.paperBig}>\r\n                            {this.state.question.length ?\r\n                                // <QuestionDisplay text={this.state.question} interrupted={this.state.interrupted} />\r\n                                <QuestionDisplay \r\n                                text={this.state.question} \r\n                                tokenizations={this.state.tokenizations}\r\n                                updateSentencePosition={(index)=>this.setState({sentenceIndex: index})}/>\r\n                                : \"Waiting\"\r\n                            }\r\n                            {/* {console.log(this.state.sentenceIndex)} */}\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={4}>\r\n                        {/* <div className=\"flex-container\" style={{\"display\": \"flex\",\"justify-content\": \"center\"}}> */}\r\n                            {/* <Buzzer onClick={this.handleBuzz} onTimeout={this.finishQuestion} style={{flex: 1}} /> */}\r\n                            {/* <ContinueButton onClick={this.handleBuzz} style={{flex: 1}}/> */}\r\n                            {/* <AnswerForm onSubmit={this.finishQuestion} label=\"Answer\"/> */}\r\n                            <AnswerForm onSubmit={this.finishQuestion_multi} label=\"Answer_multi\" />\r\n                        {/* </div> */}\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={this.skipQuestion}>\r\n                        Skip\r\n                            </Button>\r\n                        {/* <Button onClick={this.skipQuestion} /> */}\r\n\r\n                    </Grid>\r\n                    {/* <Grid item xs={6}>\r\n\r\n                        <Paper className={classes.paperBig}>\r\n                            <Searcher server_url = \"http://127.0.0.1:8000\"/>\r\n                        </Paper>\r\n                        \r\n                    </Grid> */}\r\n                    <Grid item xs={4}>\r\n                        <Paper className={classes.paper}>\r\n                            Statistics <br /><br />\r\n                            Category: {this.state.category} <br />\r\n                            Answer: {this.state.page} <br />\r\n                            Score: {this.state.score} <br />\r\n                            Number of Questions seen: {this.state.numSeen} <br />\r\n                            {this.state.tournament} {this.state.year}\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Paper className={classes.paper}>\r\n                            Instructions <br /><br />\r\n                            Try to answer the quizbowl question using as few clues as possible. <br />\r\n                            You may use Google.\r\n                            Record your search query(s), and the titles of helpful search results (if any). <br />\r\n                            Hit <code>Continue</code> to reveal the next clue. <br />\r\n                            Hit <code>Submit</code> to submit your answer. You get one attempt.\r\n                            \r\n                        </Paper>\r\n                    </Grid>\r\n                    {/* <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>xs=3</Paper>\r\n        </Grid> */}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Dashboard);\r\n","import * as React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport * as login_css from \"./Login.css\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  username: string;\r\n  password: string;\r\n  password_helper: string; \r\n  username_helper: string; \r\n  token: string;\r\n}\r\n\r\nexport default class Login extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { username: \"\", password: \"dummy\", token: \"\", username_helper:\"\",password_helper:\"\" };\r\n    this.handleUsername = this.handleUsername.bind(this);\r\n    this.handlePassword = this.handlePassword.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleUsername(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ username: event.target.value });\r\n  }\r\n\r\n  handlePassword(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ password: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    let data =\r\n      \"username=\" +\r\n      encodeURIComponent(this.state.username) +\r\n      \"&password=\" +\r\n      encodeURIComponent(this.state.password);\r\n    fetch(\"/token\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        accept: \"application/json\",\r\n      },\r\n      body: data,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        if (\"access_token\" in result) {\r\n          let token = result[\"access_token\"];\r\n          window.sessionStorage.setItem(\"token\", token);\r\n          this.setState({ username: this.state.username });\r\n        } else {\r\n          this.setState({ username: \"\", password: \"\", username_helper:\"Invalid email or password\", password_helper:\"\" });\r\n        }\r\n      });\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    if (window.sessionStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    console.log(\"Login style \"+login_css);\r\n\r\n    return (\r\n      <Container maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className=\"paper\">\r\n          <Avatar className=\"avatar\">\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h4\">\r\n            Quizbowl with Cheating\r\n          </Typography>\r\n          <form className=\"form\" noValidate onSubmit={this.handleSubmit}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.handleUsername}\r\n              helperText={this.state.username_helper}\r\n              autoFocus\r\n            />\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={this.state.password}\r\n              onChange={this.handlePassword}\r\n              helperText={this.state.password_helper}\r\n            /> */}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\"submit\"\r\n            >\r\n              Start!\r\n            </Button>\r\n            <Grid container className=\"signup\">\r\n              <Grid item xs></Grid>\r\n              <Grid item>\r\n                <a href=\"/register\" className=\"register\">\r\n                  {/* {\"Don't have an account? Sign Up\"} */}\r\n                </a>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport * as p from \"./Login.css\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  username: string;\r\n  password: string;\r\n  verify_password: string;\r\n  username_helper: string; \r\n  password_helper: string;\r\n  token: string;\r\n}\r\n\r\nexport default class Register extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { username: \"\", password: \"\", verify_password:\"\", username_helper: \"\", password_helper: \"\", token: \"\" };\r\n    this.handleUsername = this.handleUsername.bind(this);\r\n    this.handlePassword = this.handlePassword.bind(this);\r\n    this.handleVerifyPassword = this.handleVerifyPassword.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleUsername(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ username: event.target.value });\r\n  }\r\n\r\n  handlePassword(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ password: event.target.value });\r\n  }\r\n  \r\n  handleVerifyPassword(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ verify_password: event.target.value });\r\n  }\r\n\r\n  valid_email = (mail: string) => \r\n  {\r\n   if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(mail))\r\n    {\r\n      return (true)\r\n    }\r\n    return (false)\r\n  }\r\n\r\n  \r\n  handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    if(!this.valid_email(this.state.username)) {\r\n      this.setState({username:\"\",password:\"\",verify_password:\"\",username_helper:\"Not a valid email  \", password_helper:\"\"});\r\n    }\r\n    \r\n    else if(this.state.password === this.state.verify_password) {\r\n      let data =\r\n        \"username=\" +\r\n        encodeURIComponent(this.state.username) +\r\n        \"&password=\" +\r\n        encodeURIComponent(this.state.password);\r\n      fetch(\"/token/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          accept: \"application/json\",\r\n        },\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          if (\"access_token\" in result) {\r\n            let token = result[\"access_token\"];\r\n            window.sessionStorage.setItem(\"token\", token);\r\n            this.setState({ username: this.state.username });\r\n          } else {\r\n            this.setState({ username: \"\", password: \"\",verify_password:\"\",username_helper:\"Username already used\", password_helper: \"\" });\r\n          }\r\n        });\r\n    }\r\n    else {\r\n      this.setState({username_helper: \"\", password_helper:\"Passwords don't match\", password:\"\",verify_password:\"\"});\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    if (window.sessionStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    console.log(\"Register style \"+p);\r\n    \r\n    return (\r\n      <Container maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className=\"paper\">\r\n          <Avatar className=\"avatar\">\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h4\">\r\n            Register\r\n          </Typography>\r\n          <form className=\"form\" noValidate onSubmit={this.handleSubmit}>\r\n            <TextField \r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Email\"\r\n              name=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.handleUsername}\r\n              helperText={this.state.username_helper}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={this.state.password}\r\n              onChange={this.handlePassword}\r\n              helperText={this.state.password_helper}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"verify_password\"\r\n              label=\"Verify Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={this.state.verify_password}\r\n              onChange={this.handleVerifyPassword}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\"submit\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container className=\"signup\">\r\n              <Grid item xs></Grid>\r\n              <Grid item>\r\n                <a href=\"/login\" className=\"register\">\r\n                  {\"Already have an account? Login \"}\r\n                </a>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","// import React, { Component } from 'react';\n// import './App.css';\n// // import Dashboard from './Dashboard_flex';\n// import Dashboard from './Dashboard';\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n//         <h1>\n//           Quizbowl <b />\n//         </h1>\n\n//         {<Dashboard />}\n\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport * as React from \"react\";\nimport * as s from \"./App.css\";\nimport Dashboard from './Dashboard_preloaded';\n// import Dashboard from './Dashboard';\n\nimport FlexWrap from './flex_test';\nimport Login from \"./Login_dummy\";\nimport Register from \"./Register\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  console.log(\"App style \"+s);\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/register\">\n          <Register />\n        </Route>\n        <Route path=\"/\">\n          <Dashboard />\n          {/* <FlexWrap /> */}\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}